# -*- sh -*-
#[[ -z ${MY_BASHRC_$SHLVL} ]] && CYG_SYS_BASHRC="1" || return

#======== my aliases-and-functions ========
source ~/scripts/aliases-and-functions

shecho() { # для отладки
	#echo "$@"
	:
}
shecho start shellrc 

# if [ "$LOGGING_RUNNING" != 1 ]; then
# 	logdir=~/.shell-logging
# 	mkdir -p $logdir
# 	tt="$(date '+%Y-%m-%d %H-%M-%S')"
# 	export LOGGING_RUNNING=1
# 	exec script "$logdir/$tt-log" -f --timing="$logdir/$tt-timing"
# fi
# shecho script started

if [ -n "$ZSH_VERSION" ]; then
#======= ZSH PROMPT =======
	autoload promptinit
	promptinit
	prompt adam2
#======= ZSH keybindings =======
	bindkey '^[[1;5C' emacs-forward-word
	bindkey '^[[1;5D' emacs-backward-word
	bindkey '^[[F'    end-of-line
	bindkey '^[[H'    beginning-of-line
	bindkey "^[[3~"   delete-char
	bindkey "^[3;5~"  delete-char
#=== zhelp ===
	zhelp()
	{
		echo help "$@" | bash
	}
elif [ -n "$BASH_VERSION" ]; then
#======= BASH PROMPT =======
	_ptpt() { # prompt tput
		# echo -n $'\[\e['
		echo -n $'\e['
		[ $# -gt 0 ] && (echo -n $1; shift; )
		while [ $# -gt 0 ]; do
			echo -n ';'$1; shift
		done
		echo -n 'm'
		# echo -n 'm\]'
	}

	_pecho() { # prompt echo
		local text=$1;
		shift
		echo -n "$(_ptpt $@)$text$(_ptpt 0)"
	}

	print_bash_prompt() { 		# (1)$?		(2)\j		(3)\w	(4)\u@\h
		local _cp=$(curpos)

		if [ "${_cp#*;}" != 1 ]; then
			_pecho '<' 1 31 # bold
			echo
		fi

		# echo $(tput cols) $(echo "$2$3" | wc -c) $(($(tput cols) - $(echo "$2$3" | wc -c)))
		# echo $2 $1 $3 $4
		local branch_name="$(git symbolic-ref HEAD 2> /dev/null | cut -b 12-)" # get_git_branch_name
		[ -n "$branch_name" ] && branch_name="/git:$branch_name"
		local job_info; [ $2 = 0 ] && job_info='' || job_info="j$2:"
		local datetime=$(date +%H:%M)
		local mc=36 # main color - magenta

		_pecho "($job_info" $mc
		_pecho "$3" 1 # bold
		_pecho "$branch_name)" $mc

		[ $1 = 0 ] && (_ptpt 32; echo -n -) || (_ptpt 31; echo -n $1) # цвет и код возврата
		for i in $(seq 1 $(($(tput cols) - $(echo "($job_info$3$branch_name)$1($4@$datetime) " | wc -m)))); do
			echo -n -
		done
		_ptpt 0
		_pecho "($4" $mc
		_pecho "@$datetime" 35 # cyan
		_pecho ")" $mc
	}

	PS1='$(print_bash_prompt $? \j "\w" "\u@\h")\n\[\e[36m\][\!]\[\e[0m\] \$ '
fi
shecho keydindings applied

#=== PROMPT_COMMAND ===
#PROMPT_COMMAND='hpwd=$(history 1); hpwd="${hpwd# *[0-9]*  }"; hpwd="$(date "+%d/%m/%Y %H:%M:%S") # $PWD > ${hpwd% ### *}"; echo $hpwd >> ~/.extended_history'

#=== xeon addres ===
XEON=feelus@sanc.jinr.ru
XEONSVN=svn+ssh://$XEON/usr/local/svn/sanc/fortran
BASTION=fuskov@bastion.desy.de
NAFHHH=fuskov@nafhh-atlas03.desy.de

#=== PATH ===
[ -z "$(echo "$PATH" | grep "$HOME/scripts")" ] &&
	PATH="$PATH":"$HOME/scripts"

#=== runcpp options ===
export RUNCPP_OPTIONS="-std=gnu++11 -Wall -Wno-parentheses"

#=== LANGuage ===
export LANG=ru_RU.UTF-8
export LANGUAGE=ru
export LC_NUMERIC=en_US.UTF-8

shecho variables setted

#=== windows program launchers ===
if [ $(uname -o) = Cygwin ]; then
	[ -d "$(cygpath -u "$PROGRAMFILES (x86)")" ] && PROGRAMFILES="$PROGRAMFILES (x86)"
	printargs(){
		while [ $# -gt 0 ]; do
			echo "$1"
			shift
		done
	}
	winlaunch(){
		command="$1"; shift
		prefix="$1"; shift
		if [ -n "$BASH_VERSION" ]; then
			i=0;
			while [ $# -gt 0 ]; do
				arr[$i]="$prefix$(cygpath -m "$1")"
				i=$(($i + 1))
				shift
			done
			#printargs "$command" "${arr[@]}" 
			"$command" "${arr[@]}" 
		else
			if [ $# -gt 1 ] ; then
				for arg in "$@" ; do
					if [ "$arg" = '/cygdrive/*' ]; then
						echo вот в bash так можно, а здесь с абсолютным путем только по одному аргументу >&2
						return 1
					fi
				done
				#printargs "$command" "$@"
				"$command" "$@"
			else
				#printargs "$command" "$prefix$(cygpath -m "$1")" 
				"$command" "$prefix$(cygpath -m "$1")" 
			fi
		fi
	}
	subl3(){
		winlaunch	"$(cygpath -u "$ProgramW6432")/Dublime Text 3/sublime_text.exe" "" "$@" 
	}
	subl2(){
		winlaunch	"$(cygpath -u "$PROGRAMFILES")/Dublime Text 2/sublime_text.exe" "" "$@" 
	}
	alias subl=subl3
	npp(){
		winlaunch	"$(cygpath -u "$PROGRAMFILES")/Notepad++/notepad++.exe" "" "$@" 
	}
	firefox(){
		winlaunch	"$(cygpath -u "$PROGRAMFILES")/Mozilla Firefox/firefox.exe" "file:///" "$@"
	}
	opera(){
		winlaunch	"$(cygpath -u "$PROGRAMFILES")/Opera/launcher.exe" "file:///" "$@"
	}
fi

#======== SELF ALIASES ========
_check_alias() { # устанавливает алиас и выводит, если есть изменения (добавления изменениями не считаются)
	local old_alias="$(alias $1 2>/dev/null)"
	local new_alias="alias $1='$2'"
	# echo
	# echo old_alias = $old_alias
	# echo new_alias = $new_alias
	# echo 'diff      =' ${new_alias#${old_alias%\'}}

	local tmp=$([ -z "$old_alias" -o "$old_alias" = "$new_alias" -o "${new_alias#${old_alias%\'}}" != "$new_alias" ] && echo false || echo true)

	$tmp && echo $(alias $1) replaced to
	alias $1="$2"
	$tmp && alias $1
	$tmp && echo
}

#=== rm ===
alias rm=rm-to-trash
alias rrm='env rm'

#=== cp ===
_check_alias cp 'cp -ir'
# спрашивать перед тем как переписывать (отменяет ранее указанный ключ -n)
# рекурсивно копировать каталоги

#=== mv ===
_check_alias mv 'mv -i'
# спрашивать перед тем как переписывать

#=== grep ===
_check_alias grep 'grep --color=auto  --binary-files=text -E'
# расширенные регулярные выражения

#=== sed ===
_check_alias sed 'sed -r'
# расширенные регулярные выражения

#=== ls ===
_check_alias ls "ls --color=auto --group-directories-first --escape"
_check_alias ll "ls -AlF"
_check_alias la "ls -A"
# A - не скрывать файлы начинающиеся с .
# l - использовать широкий формат
# F - добавлять к имени файла индикатор (один из */=>@|)

#=== cd ===
#alias cd='cd -P'
alias ..="cd .."
alias ....='cd ../..'
alias ......="cd ../../.."
alias ........="cd ../../../.."
alias ..........="cd ../../../../.."
alias ............="cd ../../../../../.."
alias ..............="cd ../../../../../../.."
alias ................="cd ../../../../../../../.."

#=== cygserver ===
#echo cygwin threads, run by superuser
#[ "$(uname -o)" = Cygwin ] && reg query "hku\S-1-5-19" >/dev/nul 2>/dev/nul &&
#        cygrunsrv -S cygserver #&& echo set for cygwin


#=== mycd ===
alias cd=mycd
alias dirs='dirs -p'
# print the directory stack with one entry per line
alias cd-='cd -'
alias cd--='cd --'
alias cd---='cd ---'
alias cd----='cd ----'
alias cd-----='cd -----'
alias cd------='cd ------'
alias cd+='cd +'
alias cd++='cd ++'
alias cd+++='cd +++'
alias cd++++='cd ++++'
alias cd+++++='cd +++++'
alias cd++++++='cd ++++++'

shecho aliases setted

mycd()
{
	local dirok=0
	[ "$(pwd)" = "$(pwd -P)" ] && dirok=1 # физ и логич пути к директории совпадают
	# часть стека директорий хранит bash (это управляется pushd, popd, dirs)
	# и часть - в $DIRS2

	if [ $# = 0 ]; then # cd (без аргументов)
		pushd ~ >/dev/null 
		#если раньше совпадали, а теперь нет, то нужно сделать, чтобы они все-таки совпадали 
		[ $dirok = 1 ] && [ "$(pwd)" != "$(pwd -P)" ] && pushd "$(pwd -P)"
		DIRS2=
		ls
		return
	fi

	if [ "$1" = - -o -n "$(echo "$1" | grep -xe '-*')" ]; then # cd ---
		local arg=$1
		local tmp
		while [ -n "$arg" ]; do
			read tmp < <(dirs) 
			popd >/dev/null
			[ $? != 0 ] && return
			push DIRS2 "$tmp"
			arg=${arg#-}
		done

		printf "%s\n---> " "$DIRS2"
		dirs
		ls
		return
	fi

	if [ -n "$(echo "$1" | grep -xe '\+*')" ]; then # cd +++
		local arg=$1
		local tmp
		while [ -n "$arg" ]; do
			popto DIRS2 tmp
			[ -z "$tmp" ] && return
			local home=~
			[ "$tmp" != "${tmp#\~}" ] && tmp="$home${tmp#\~}"
			# echo "$tmp"
			pushd "$tmp" > /dev/null
			arg=${arg#+}
		done
		
		printf "%s\n---> " "$DIRS2"
		dirs
		ls
		return
	fi

	pushd "$1" >/dev/null || return -1
	[ $dirok = 1 ] && [ "$(pwd)" != "$(pwd -P)" ] && pushd "$(pwd -P)"
	DIRS2=
	ls
}

shecho func mycd defined

#=== ewd ===
if [ $(uname -o) = Cygwin ]; then
#    if [ -n $(systeminfo.exe | grep 'OS Name:.*XP') ]; then
	case "$(cmd /C ver | grep -iE 'Microsoft.*Windows' | grep -o '[0-9]\.[0-9]')" in 
	5*) alias ewd='explorer $(cygpath -w $(pwd))' ;;
	*) alias ewd='cmd /c start.' ;;
	#*) echo shellrc: unknown version of microsoft windows, and therefore ewd is not set >&2;;
	esac
else
	if [ -n "$(which caja)" ]; then
		alias ewd='caja .'
	elif [ -n "$(which nautilus)" ]; then
		alias ewd='nautilus .'
	elif [ -n "$(which dolphin)" ]; then
		alias ewd='dolphin . >/dev/null 2>&1 &'
	else
		echo shellrc: at unix, both caja and nautilus not found, and therefore commans \'ewd\' is not set >&2
	fi
fi
shecho ewd setted

#=== do by start ===
shecho ls started
ls
